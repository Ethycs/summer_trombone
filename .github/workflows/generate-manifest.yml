name: Build and Deploy

on:
  push:
    branches:
      - main # Or your default branch

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch the full history to get accurate creation dates
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate manifest
        id: generate_manifest
        run: node .github/scripts/generate-manifest.js
        
      - name: Check if summaries needed
        id: check_summaries
        run: node .github/scripts/check-summary-needed.js
        
      - name: Generate summaries for changed files
        if: steps.check_summaries.outputs.needed == 'true'
        run: |
          echo "Files need new summaries, loading summarization model..."
          node .github/scripts/generate-summaries.mjs
          
      - name: Skip summarization
        if: steps.check_summaries.outputs.needed != 'true'
        run: echo "No files need summarization - skipping expensive model load"

      - name: Commit and push manifest
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore: Update system/filesystem.json manifest"
          file_pattern: 'system/filesystem.json' # Changed file pattern
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Build project
        run: |
          if [ -f "CNAME" ]; then
            echo "Custom domain detected, building with root base path"
            npm run build:custom-domain
          else
            echo "No custom domain, building for GitHub Pages"
            npm run build:github-pages
          fi

      - name: Verify articles.json generation
        run: |
          echo "Checking for articles.json file..."
          if [ -f "dist/articles.json" ]; then
            echo "✅ articles.json found!"
            echo "File size: $(ls -lh dist/articles.json | awk '{print $5}')"
            echo "Number of articles: $(grep -o '"\/blog\/' dist/articles.json | wc -l)"
            echo "First 500 characters:"
            head -c 500 dist/articles.json
            echo ""
            echo "Articles included:"
            grep -o '"\/blog\/[^"]*"' dist/articles.json | sort | uniq
          else
            echo "❌ ERROR: articles.json not found!"
            echo "Contents of dist directory:"
            ls -la dist/
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        if: success()
        run: |
          echo "Deployment complete. Waiting 30 seconds for propagation..."
          sleep 30
          
          # Determine the URL based on CNAME
          if [ -f "CNAME" ]; then
            DOMAIN=$(cat CNAME)
            BASE_URL="https://${DOMAIN}"
          else
            BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          fi
          
          echo "Testing articles.json at: ${BASE_URL}/articles.json"
          
          # Test if articles.json is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/articles.json")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ articles.json is accessible (HTTP $HTTP_STATUS)"
            echo "File content preview:"
            curl -s "${BASE_URL}/articles.json" | head -c 500
          else
            echo "⚠️ WARNING: articles.json returned HTTP $HTTP_STATUS"
            echo "This might be normal if the deployment hasn't fully propagated yet."
            echo "Please check manually at: ${BASE_URL}/articles.json"
          fi
